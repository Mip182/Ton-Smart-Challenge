{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}

() recv_internal() {
}

builder begin_cell() asm "NEWC";
cell end_cell(builder b) asm "ENDC";
int cell_hash(cell c) asm "HASHCU";
forall X -> int is_null(X x) asm "ISNULL";
forall X -> (tuple, ()) push_back(tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back(tuple t) asm "UNCONS";
forall X -> X null() asm "PUSHNULL";
int slice_refs(slice s) asm "SREFS";
(slice, cell) load_ref(slice s) asm(-> 1 0) "LDREF";
slice begin_parse(cell c) asm "CTOS";

(cell, int) find_best_cell(int hash, cell s) {
    if (cell_hash(s) == hash) {
        return (s, 1);
    }
    slice s_slice = s.begin_parse();
    repeat (s_slice.slice_refs()) {
        (cell maybe, int is) = find_best_cell(hash, s_slice~load_ref());
        if (is == 1) {
            return (maybe, is);
        }
    }
    return (begin_cell().end_cell(), 0);
}
;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
    (cell ans, int is) = find_best_cell(hash, tree);
    return ans;
}
